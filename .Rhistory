bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Price
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Price
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
z_test2(samplecase1, samplecase2, var(housing.dataset$Price), var(housing.dataset$Price))
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Landsize
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Landsize
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Landsize
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Landsize
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Landsize
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Landsize
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Landsize
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Landsize
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Landsize
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Landsize
samplecase1<- sample(priceofbathroom1,3000)
samplecase2<- sample(priceofbathroom2,3000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==5)
priceofbathroom1 <- bathroom1$Price
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Price
samplecase1<- sample(priceofbathroom1,3000)
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==5)
priceofbathroom1 <- bathroom1$Price
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==2)
priceofbathroom2 <- bathroom2$Price
samplecase1<- sample(priceofbathroom1,500)
summary(housing.dataset$Bathroom)
bathroom1 <- subset(housing.dataset,subset=housing.dataset$Bathroom==1)
priceofbathroom1 <- bathroom1$Price
bathroom2 <- subset(housing.dataset,subset=housing.dataset$Bathroom==3)
priceofbathroom2 <- bathroom2$Price
samplecase1<- sample(priceofbathroom1,500)
samplecase2<- sample(priceofbathroom2,500)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(samplecase1, samplecase2, var(samplecase1), var(samplecase2))
summary(housing.dataset$Distance)
distance_1.6 <- subset(housing.dataset,subset=housing.dataset$Distance==1.6)
distance_1.6_price <- distance_1.6$Price
distance_2.5 <- subset(housing.dataset,subset=housing.dataset$Distance==2.5)
distance_2.5_price <- distance_2.5$Price
#taking equal amount of sample size 30
sam1<-sample(distance_1.6_price,30)
sam2<-sample(distance_2.5_price,30)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(sam1, sam2, var(sam1), var(sam2))
#also using t.test to check the difference in mean
#Assuming we take a smaller sample that the central limit theorem (30)
sam_t1<-sample(distance_1.6_price,10)
sam_t2<-sample(distance_2.5_price,10)
t.test(sam_t1,sam_t2)
summary(housing.dataset$Distance)
knitr::opts_chunk$set(echo = TRUE)
if (!require('magrittr')) install.packages('magrittr'); library('magrittr') # check for and load the required packages
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
# check for and load the required packages
if (!require('data.table')) install.packages('data.table'); library('data.table')
# check for and load the required packages
if (!require("BSDA")) install.packages("BSDA");
library(BSDA)
if (!require("ggpubr")) install.packages("ggpubr")
library("ggpubr")
if (!require("rAmCharts")) install.packages("rAmCharts")
library(rAmCharts)
housing.dataset <- read.csv("melbourne_data.csv") # reading the dataframe  in to  housing.dataset variable
str(housing.dataset)
housing.dataset <- unique(housing.dataset) # to check for duplicate rows
housing.dataset <- na.omit(housing.dataset) # removing rows with Values
housing.dataset <- subset(housing.dataset,subset=housing.dataset$Landsize>11)
# removing the landSize values that are less than the standard land size requirement which 11meters (121 square meters)
housing.dataset <- subset(housing.dataset,subset=housing.dataset$BuildingArea!=0) # removing the BuildingArea values that are zero's
housing.dataset<- droplevels(housing.dataset) # removing #NA's Factors
housing.dataset$Distance <- as.numeric(as.character(housing.dataset$Distance)) #to change datatype of Distance from Factor to Numeric
summary(housing.dataset$Distance)
knitr::opts_chunk$set(echo = TRUE)
housing.dataset <- read.csv("melbourne_data.csv") # reading the dataframe  in to  housing.dataset variable
str(housing.dataset)
housing.dataset <- unique(housing.dataset)
housing.dataset <- na.omit(housing.dataset)
housing.dataset <- subset(housing.dataset,subset=housing.dataset$Landsize>11)
housing.dataset <- subset(housing.dataset,subset=housing.dataset$BuildingArea!=0) # removing the BuildingArea values that are zero's
housing.dataset<- droplevels(housing.dataset) # removing #NA's Factors
housing.dataset$Distance <- as.numeric(as.character(housing.dataset$Distance))
housing.dataset$Distance <- as.numeric(as.character(housing.dataset$Distance))
mean(housing.dataset$Landsize)
sd(housing.dataset$Landsize)
r_sample<-sample(housing.dataset$Landsize,5500)
z.test(r_sample, mu = 590.8548, alternative = "greater", sigma.x= 1111.218,conf.level = 0.90 )
knitr::opts_chunk$set(echo = TRUE)
housing.dataset <- read.csv("melbourne_data.csv") # reading the dataframe  in to  housing.dataset variable
str(housing.dataset)
housing.dataset <- unique(housing.dataset)
housing.dataset <- na.omit(housing.dataset)
housing.dataset <- subset(housing.dataset,subset=housing.dataset$Landsize>11)
housing.dataset <- subset(housing.dataset,subset=housing.dataset$BuildingArea!=0) # removing the BuildingArea values that are zero's
housing.dataset<- droplevels(housing.dataset) # removing #NA's Factors
housing.dataset$Distance <- as.numeric(as.character(housing.dataset$Distance))
z.test(r_sample, mu = 590.8548, alternative = "greater", sigma.x= 1111.218,conf.level = 0.90 )
mean(housing.dataset$Landsize)
sd(housing.dataset$Landsize)
r_sample<-sample(housing.dataset$Landsize,5500)
z.test(r_sample, mu = 590.8548, alternative = "greater", sigma.x= 1111.218,conf.level = 0.90 )
install.packages("BSDA")
library(BSDA)
mean(housing.dataset$Landsize)
sd(housing.dataset$Landsize)
r_sample<-sample(housing.dataset$Landsize,5500)
z.test(r_sample, mu = 590.8548, alternative = "greater", sigma.x= 1111.218,conf.level = 0.90 )
install.packages("BSDA")
library(BSDA)
mean(housing.dataset$Landsize)
sd(housing.dataset$Landsize)
r_sample<-sample(housing.dataset$Landsize,5500)
z.test(r_sample, mu = 590.8548, alternative = "greater", sigma.x= 1111.218,conf.level = 0.90 )
unlink('Big Data Assignment 2 Worksheet/Big Data Assignment 2 Hypothesis Testing_cache', recursive = TRUE)
install.packages("webshot")
webshot::install_phantomjs()
x <- c(100, 135, 108, 94, 111, 96, 99, 104, 109, 120)
sd(x)
x <- c(414, 123, 72, 79, 66, 84, 169, 144, 102, 110, 162)
quantile(x, type=1)
order(x)
x <- order(x)
x
x[order(x)]
x
x <- c(414, 123, 72, 79, 66, 84, 169, 144, 102, 110, 162)
order(x)
x[order(x)]
quantile(x, type=1)
quantile(x, type=1)
quartile(x)
head(x)
head(x,10)
rep(x,5)
w <-scan(100, 20, 30, 50, 60)
help(scan)
c <- 10:80
class(c)
rsort(c)
order(c)
!order(c)
y <-c(NA, 13, 22, NA, 544, NA)
is.na(y)
bad<- is.na(y)
y[!bad]
y <- y[!bad]
y
rev(x)
order(x)
sort(x)
rev(x)
rev(sort(x))
library(iris)
library("iris")
library(datasets)
data(iris)
[,iris$Sepal.Width > 3.5]
z <- iris[,iris$Sepal.Width] > 3.5
z
z <- iris[,iris$Sepal.Width > 3.5]
z <- (iris[,iris$Sepal.Width] >3.5)
z
x <- seq(1,11, by = 2)
x
t <- iris$Sepal.Width > 3.5
t
t <- c(66, 72, 79, 84, 102, 110, 123, 144, 162, 169, 414)
quantile(t)
quantile(x, type=1)
quantile(t, type=1)
p <- c(66, 72, 79, 84, 102, 110, 123, 144, 162, 169)
quantile(p, type=1)
t <- c(66, 72, 79, 84, 102, 110, 123, 144, 162, 169, 414)
p <- c(66, 72, 79, 84, 102, 110, 123, 144, 162, 169)
quantile(p, type=1)
p <- c(66, 72, 79, 84, 102, 110, 123, 144, 162, 169)
quantile(p, type=1)
e <- c(8,8,9,10,11,11,11,11,14,15)
quantile(e, type = 1)
x1 <- c(70, 115, 105, 82, 93, 125, 88)
y1 <- c (3, 45, 21, 7, 16, 62, 12)
cor(x1,y1)
k <-sort(x1)
k2 <-sort(y1)
cor(k,k2)
j1 <- c(1,2,3,4,5)
j2 <- c(14,18.9,14.4,19.6,20.0)
cor(j1,j2)
greater<- 1 - pnorm(1.5, mean=1, sd=sqrt(4))
greater
greater<- 1 - pnorm(1.5, mean=1, sd=sqrt(4))
greater
between <- pnorm(5, mean = 1, sd = sqrt(4), lower.tail=TRUE)- pnorm(2, mean = 1, sd = sqrt(4), lower.tail=TRUE)
between
x <- c(117, 92, 102, 115, 87, 76, 107, 108, 121, 91, 113, 98)
y <- c(3.7,2.6,3.3,2.2,2.4,1.8,2.8,3.2,3.0,4.0,3.5)
cor(x,y)
y <- c(3.7,2.6,3.3,2.2,2.4,1.8,2.8,3.2,3.8,3.0,4.0,3.5)
x <- c(117, 92, 102, 115, 87, 76, 107, 108, 121, 91, 113, 98)
cor(x,y)
knitr::opts_chunk$set(echo = TRUE)
t.test(mpg$hwy, mu=25)
library(ggplot2)
library(ggplot2)
data(mpg)
t.test(mpg$hwy, mu=25)
summary(mpg)
mean(mpg$displ)
random_sample<-sample(mpg$displ,10) # taking 10 random sample for the normal distribution test
hist(random_sample, main="Histogram of Price", ylab="Frequency", xlab = "Price", col = "#FFFACD", border = "black" )
hist(random_sample, main="Histogram of engine displacement, in litres", ylab="Frequency", xlab = "engine displacement, in litres", col = "#FFFACD", border = "black" )
set.seed(1234)
ggdensity(random_sample,
main = "Density plot of engine displacement, in litres",
xlab = "Random sample of engine displacement, in litres")
knitr::opts_chunk$set(echo = TRUE)
if (!require('magrittr')) install.packages('magrittr'); library('magrittr') # check for and load the required packages
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
# check for and load the required packages
if (!require('data.table')) install.packages('data.table'); library('data.table')
# check for and load the required packages
if (!require("BSDA")) install.packages("BSDA");
library(BSDA)
if (!require("ggpubr")) install.packages("ggpubr")
library("ggpubr")
if (!require("rAmCharts")) install.packages("rAmCharts")
library(rAmCharts)
ggdensity(random_sample,
main = "Density plot of engine displacement, in litres",
xlab = "Random sample of engine displacement, in litres")
# checking if the data is normally distributed by using the qqplot function
ggqqplot(random_sample)
#checking if the data is normally distributed using shapiro test
shapiro.test(random_sample)
t.test(mpg$hwy, mu=3.472)
t.test(mpg$displ, mu=3.472)
head(mpg)
tail(mpg)
mpg$fam=factor(mpg$displ, levels=c(0,1), labels=c("automatic","manual"))
attach(mpg)
head(mpg)
mpg$fam=factor(mpg$trans, levels=c(0,1), labels=c("automatic","manual"))
attach(mpg)
head(mpg)
summary(mpg$fam)
data(mpg)
summary(mpg)
t.test(mpg$displ, mu=3.472)
print(mpg$drv)
chisq.test(mpg$drv, mpg$fl)
random_sample1<-sample(mpg$drv,10) # taking 10 random sample drv for the normal distribution test
random_sample2<-sample(mpg$fl,10) # taking 10 random sample fl for the normal distribution test
hist(random_sample1, main="Histogram of engine displacement, in litres", ylab="Frequency", xlab = "engine displacement, in litres", col = "#FFFACD", border = "black" )
hist(table(random_sample1), main="Histogram of engine displacement, in litres", ylab="Frequency", xlab = "engine displacement, in litres", col = "#FFFACD", border = "black" )
hist(table(random_sample2), main="Histogram of engine displacement, in litres", ylab="Frequency", xlab = "engine displacement, in litres", col = "#FFFACD", border = "black" )
set.seed(1234)
ggdensity(random_sample1,
main = "Density plot of engine displacement, in litres",
xlab = "Random sample of engine displacement, in litres")
ggdensity(table(random_sample1),
main = "Density plot of engine displacement, in litres",
xlab = "Random sample of engine displacement, in litres")
random_sample1<-sample(mpg$drv,10) # taking 10 random sample drv for the normal distribution test
ggdensity(table(random_sample1),
main = "Density plot of engine displacement, in litres",
xlab = "Random sample of engine displacement, in litres")
# checking if the data is normally distributed by using the qqplot function
ggqqplot(random_sample1)
# checking if the data is normally distributed by using the qqplot function
ggqqplot(table(random_sample1))
#checking if the data is normally distributed using shapiro test
shapiro.test(random_sample1)
#checking if the data is normally distributed using shapiro test
shapiro.test(table(random_sample1))
shapiro.test(table(random_sample2))
chisq.test(mpg$drv, mpg$fl)
#To calculate critical values at 95% confidence levels we put p =0.95 and df = 4
qchisq(0.95,4)
spineplot(mpg$drv, mpg$fl, xlab="House type",ylab="price level", main="Relationship of House type and price level",col = rainbow(nlevels(mpg$drv)))
spineplot(mpg$drv, mpg$fl, xlab="House type",ylab="price level", main="Relationship of House type and price level",col = rainbow(nlevels(mpg$fl)))
spineplot(mpg$drv, mpg$trans, xlab="House type",ylab="price level", main="Relationship of House type and price level",col = rainbow(nlevels(mpg$trans)))
chisq.test(mpg$drv, mpg$fl)
#To calculate critical values at 95% confidence levels we put p =0.95 and df = 4
qchisq(0.95,8)
unique(mpg$trans)
mpg.manualm5 <- subset(mpg,subset=mpg$trans=="manual(m5)")
mpg.manualm6 <- subset(mpg,subset=mpg$trans=="manual(m6)")
length(mpg.manualm5)
length(mpg.manualm6)
t.test(mpg.manualm5, mpg.manualm6)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(mpg.manualm5, mpg.manualm6, var(mpg$trans), var(mpg$trans))
length(mpg1999)
mpg1999 <- subset(mpg,subset=mpg$year==1999)
mpg2000 <- subset(mpg,subset=mpg$year==2000)
length(mpg1999)
length(mpg2000)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(mpg1999, mpg2000, var(mpg$year), var(mpg$year))
t.test(mpg1999, mpg2000)
mpg1999<-mpg1999$hwy
mpg1999<-mpg1999$hwy
onlympg1999<-mpg1999$hwy
onlympg1999<-mpg1999$hwy
onlympg1999<-mpg1999$displ
mpg1999 <- subset(mpg,subset=mpg$year==1999)
mpgyes <- mpg1999$hwy
mpg1999hwy <- mpg1999$hwy
mpg2000 <- subset(mpg,subset=mpg$year==2000)
mpg2000hwy <- mpg2000$hwy
length(mpg1999)
length(mpg2000)
t.test(mpg1999hwy, mpg2000hwy)
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(mpg1999hwy, mpg2000hwy, var(mpg$hwy,mpg$hwy))
z_test2(mpg1999hwy, mpg2000hwy,  var(mpg$hwy), var(mpg$hwy))
mpg1999 <- subset(mpg,subset=mpg$drv=="front-wheel drive")
mpg1999 <- subset(mpg,subset=mpg$drv=="f")
mpg2000 <- subset(mpg,subset=mpg$drv=="r")
length(mpg1999)
length(mpg2000)
mtcars_df <- tbl_df(mpg)
mpg.at <- mtcars_df[mtcars$drv == "f",]$mpg
mtcars_df <- tbl_df(mpg)
mtcars.hp1vtc <- mtcars_df[mtcars$cyl == 4,]$hwy
mtcars.hp1vtc <- mtcars_df[mpg$cyl == 4,]$hwy
mpg.at <- mtcars_df[mpg$drv == "f",]$mpg
mtcars_df <- tbl_df(mpg)
mpg.at <- mtcars_df[mpg$drv == "f",]$mpg
mtcars_df <- tbl_df(mtcars)
mtcars_df <- tbl_df(mpg)
mtcars.hp1vtc <- mtcars_df[mtmpg$cyl == 4,]$hwy
mtcars_df <- tbl_df(mpg)
mtcars.hp1vtc <- mtcars_df[mtmpg$cyl == 4,]$hwy
mtcars.hp1vtc <- mtcars_df[mpg$cyl == 4,]$hwy
mtcars.hp2st <- mtcars_df[mpg$cyl == 6, ]$hwy
length(mtcars.hp1vtc)
length(mtcars.hp2st)
t.test(mtcars.hp1vtc, mtcars.hp2st)
unique(mpg$class)
qqnorm(mtcars.hp1vtc);qqline(mtcars.hp1vtc)
par(mfrow=c(1,2))
qqnorm(mtcars.hp1vtc);qqline(mtcars.hp1vtc)
qqnorm(mtcars.hp2st); qqline(mtcars.hp2st)
mpg_df <- tbl_df(mpg) # first we convert to dataframe
mpg.hwycyl4 <- mpg_df[mpg$cyl == 4,]$hwy
mpg.hwycyl6 <- mpg_df[mpg$cyl == 6, ]$hwy
mpg.hwycyl6 <- mpg_df[mpg$cyl == 6, ]$hwy
mpg.hwycyl4 <- mpg_df[mpg$cyl == 4,]$hwy
mpg.hwycyl4 <- mpg_df[mpg$cyl == 4,]$hwy
qqnorm(mtcars.hp1vtc);qqline(mtcars.hp1
qqnorm(mpg.hwycyl4);qqline(mpg.hwycyl4)
length(mpg.hwycyl4)
length(mpg.hwycyl6)
t.test(samplea, sampleb)
boxplot(mpg.hwycyl4, xlab="highway miles per gallon with 4 cylinders",ylab="Mpg hwy", horizontal=TRUE)
boxplot(mpg.hwycyl6, xlab="highway miles per gallon with 6 cylinders",ylab="Mpg hwy", horizontal=TRUE) # checking the outliers
samplea <- sample(mpg.hwycyl4,75)
sampleb <- sample(mpg.hwycyl6,75)
(samplea, sampleb)
t.test(samplea, sampleb)
cor.test(mpg$hwy, mpg$cyl)
cor.test(mpg$hwy, mpg$displ)
mpg_df <- tbl_df(mpg) # first we convert to dataframe
mpg.displyear1999 <- mpg_df[mpg$year == 1999,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
mpg.displyear2000 <- mpg_df[mpg$year == 2000, ]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear1999);qqline(mpg.displyear1999) # check if the two variables are normaly distributed
qqnorm(mpg.displyear2000); qqline(mpg.displyear2000) # check if the two variables are normaly distributed
mpg.displyear2000 <- mpg_df[mpg$year == 2000, ]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear2000); qqline(mpg.displyear2000) # check if the two variables are normaly distributed
mpg.displyear2000 <- mpg_df[mpg$year == 2000,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear2000); qqline(mpg.displyear2000) # check if the two variables are normaly distributed
mpg.displyear2000 <- mpg_df[mpg$year == 2004,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear2000); qqline(mpg.displyear2000) # check if the two variables are normaly distributed
mpg.displyear2004 <- mpg_df[mpg$year == 2004,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear2004);qqline(mpg.displyear2004)# check if the two variables are normaly distributed
qqnorm(mpg.displyear1999);qqline(mpg.displyear1999) # check if the two variables are normaly distributed
qqnorm(mpg.displyear2004);qqline(mpg.displyear2004)# check if the two variables are normaly distributed
boxplot(mpg.displyear2004, xlab="highway miles per gallon with 6 cylinders",ylab="Mpg hwy", horizontal=TRUE) # checking the outliers
mpg.displyear2004 <- mpg_df[mpg$year == 2008,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear2004);qqline(mpg.displyear2004)# check if the two variables are normaly distributed
mpg.displyear1999 <- mpg_df[mpg$year == 1999,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
mpg.displyear2008 <- mpg_df[mpg$year == 2008,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 1999
qqnorm(mpg.displyear1999);qqline(mpg.displyear1999) # check if the two variables are normaly distributed
qqnorm(mpg.displyear2008);qqline(mpg.displyear2008)# check if the two variables are normaly distributed
boxplot(mpg.displyear2008, xlab="engine displacement, in litres year 2008",ylab="Mpg displ", horizontal=TRUE) # checking the outliers
boxplot(mpg.displyear1999, xlab="engine displacement, in litres year 1999",ylab="Mpg displ", horizontal=TRUE) # checking the outliers
length(mpg.displyear1999) #checking the length of hwy with 4 cylinders
length(mpg.displyear2008) #checking the engine displacement, in litres in year manufactured 2008
length(mpg.displyear1999) #checking the engine displacement, in litres in year manufactured 1999
length(mpg.displyear2008) #checking the engine displacement, in litres in year manufactured 2008
mpg.displyear2008 <- mpg_df[mpg$year == 2008,]$displ #subsetting and creating a new dataframe of mpgdispl with manufactured year 2008
length(mpg.displyear2008) #checking the engine displacement, in litres in year manufactured 2008
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
length(mpg.displyear1999) #checking the engine displacement, in litres in year manufactured 1999
length(mpg.displyear2008) #checking the engine displacement, in litres in year manufactured 2008
z_test2 = function(a, b, var_a, var_b){
n.a = length(a)
n.b = length(b)
z = (mean(a) - mean(b)) / (sqrt((var_a)/n.a + (var_b)/n.b))
return(z)
}
z_test2(mpg.displyear1999, mpg.displyear2008, var(mpg$displ), var(mpg$displ))
setwd("C:/Users/bwhizzy/Desktop/Grifffith college files/Applied Data Analytics/Police Killings")
x <- read.csv("PoliceKillingsUS.csv")
